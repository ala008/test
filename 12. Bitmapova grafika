##################
# 12.1.0 Kolecko #
##################
from PIL import Image


BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Zjisti, zda je zadany bod uvnitr kruhu o danem polomeru, jehoz stred
# je uprostred ctvercoveho obrazku.
def in_circle(size, radius, x, y):
    return (x - size / 2) ** 2 + (y - size / 2) ** 2 < radius ** 2


def circle(size=150, radius=50):
    # Vytvorime objekt pro manipulaci s obrazkem
    im = Image.new("RGB", (size, size))
    # Prochazime vsechny pixely naseho obrazku a kontrolujeme, zda lezi
    # v kruhu
    for x in range(size):
        for y in range(size):
            if in_circle(size, radius, x, y):
                # Pixel na souradnicich (x, y) obarvime na cerno.
                im.putpixel((x, y), BLACK)
            else:
                # Pixel na souradnicich (x, y) obarvime na bilo.
                im.putpixel((x, y), WHITE)
    # obrazek si muzeme zobrazit
    im.show()
    # nebo jej muzeme ulozit do souboru
    im.save("demo_circle.png")


# Vykresli kruh o polomeru 50 na bilem ctverci o strane 150.
circle()

##################
# 12.1.1 Ctverec #
##################
from PIL import Image

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)


# Zjisti, zda je zadany bod uvnitr ctverce o dane strane, jehoz stred
# je uprostred ctvercoveho obrazku.
def in_square(size, a, x, y):
    return abs(x - size / 2) < a and abs(y - size / 2) < a


def square(size=250, a=70):
    # Vytvorime objekt pro manipulaci s obrazkem
    im = Image.new("RGB", (size, size))
    # Prochazime vsechny pixely naseho obrazku a kontrolujeme, zda lezi
    # v kruhu
    for x in range(size):
        for y in range(size):
            if in_square(size, a, x, y):
                # Pixel na souradnicich (x, y) obarvime na cerno.
                im.putpixel((x, y), BLACK)
            else:
                # Pixel na souradnicich (x, y) obarvime na bilo.
                im.putpixel((x, y), WHITE)
    # obrazek si muzeme zobrazit
    im.show()
    # nebo jej muzeme ulozit do souboru
    # im.save("demo_square.png")


# Vykresli cerny ctverec o strane 70 na bilem ctverci o strane 250.
square()

###########################
# 12.1.10. Vlny a čtverec #
###########################
from PIL import Image
import math

def in_square(size, a, x, y):
    return abs(x - size / 2) < a and abs(y - size / 2) < a

def waves(size, k, a):
    im = Image.new("RGB", (size, size))
    for x in range(size):
        for y in range(size):
            distance = math.sqrt((x - size // 2) ** 2 + (y - size // 2) ** 2)
            if in_square(size, a/2, x, y):
                value = 255-(int(math.cos(distance*k/50) * 128) + 128)
            else:
                value = 255-(int(math.sin(distance*k/50) * 128) + 128)
            im.putpixel((x, y), (value, value, value))
    im.show()

waves(500, 3, 300)

#####################
# Rozmlzeni obrazku #
#####################
from PIL import Image

im = Image.open("Bitmap.jpg").convert("RGB")
width, height = im.size

im1 = Image.new("RGB", (width, height))

# parametr udava, kolik sousednich pixelu se prumeruje
size = 1
for x in range(width):
    for y in range(height):
        r1, g1, b1, poc = 0, 0, 0, 0
        for i in range(-size, size+1):
            for j in range(-size, size+1):
                x1 = x + i
                y1 = y + j
                if x1 >= 0 and x1 < width and y1 >= 0 and y1 < height:
                    r, g, b = im.getpixel((x1, y1))
                    r1 += r
                    g1 += g
                    b1 += b
                    poc += 1
        im1.putpixel((x, y), (r1//poc, g1//poc, b1//poc))

im1.show()
