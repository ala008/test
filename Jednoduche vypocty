################################################################################
# 3.1.1. Faktoriál pomocí for
################################################################################
def factorial(n):
    fak = 1
    for i in range(2, n + 1):
        fak *= i
    return fak

print(factorial(0))      # 1
print(factorial(1))      # 1
print(factorial(10))     # 3628800
print(factorial(50))     # 30414093201713378043612608166064768844377641568960512000000000000

################################################################################
# 3.1.2 Faktoriál pomocí while
################################################################################
def factorial(n):
    i, fak = 1, 1
    while ( i < n ):
        i += 1
        fak *= i
    return fak

print(factorial(0))      # 1
print(factorial(1))      # 1
print(factorial(10))     # 3628800
print(factorial(50))     # 30414093201713378043612608166064768844377641568960512000000000000

################################################################################
# 3.1.3 Ciferný součet
################################################################################
def digit_sum(n):
    soucet = n % 10
    while (n > 0):
        n = int( n / 10 )
        soucet += n % 10
    return soucet

print(digit_sum(0))              # 0
print(digit_sum(274))            # 13
print(digit_sum(123456789))      # 45

################################################################################
# 3.1.4. Opakovaný ciferný součet
################################################################################
def digit_sum(n):
    soucet = n % 10
    while (n > 0):
        n = int( n / 10 )
        soucet += n % 10
    return soucet

def repeated_digit_sum(n):
    while (n > 10): 
        n = digit_sum(n)
    return n

print(repeated_digit_sum(123))               # 6
print(repeated_digit_sum(123456789))         # 9
print(repeated_digit_sum(99989788879879))    # 7

################################################################################
# 3.2.1. Dělitelé
################################################################################
def divisors(n):
    for i in range (1, n + 1):
        if ( n % i == 0):
            print(i, end= " ")
    print()

divisors(1)     # 1
divisors(5)     # 1 5
divisors(42)    # 1 2 3 6 7 14 21 42
divisors(127)   # 1 127
divisors(1024)  # 1 2 4 8 16 32 64 128 256 512 1024

################################################################################
# 3.2.2. Počet dělitelů
################################################################################
def divisors_count(n):
    cnt = 0
    for i in range (1, n + 1):
        if ( n % i == 0):
            cnt += 1
    return cnt

print(divisors_count(1))     # 1
print(divisors_count(5))     # 2
print(divisors_count(42))    # 8
print(divisors_count(127))   # 2
print(divisors_count(1024))  # 11

################################################################################
# 3.2.3. Je prvočíslo
################################################################################
def is_prime(n):
    for i in range (2, n//2 + 1):    # celočíselné dělení
        if (n % i == 0):
            return False
    return True

print(is_prime(1))      # False (jednička je prvočíslo - vracím True místo False)
print(is_prime(2))      # True
print(is_prime(3))      # True
print(is_prime(42))     # False
print(is_prime(127))    # True

################################################################################
# 3.2.4. Prvočísla menší než limit
################################################################################
# Funkce is_prime ze cvičení 3.2.3
def is_prime(n):
    for i in range (2, n//2 + 1):
        if (n % i == 0):
            return False
    return True

def primes_less_than(limit):
    for i in range (2, limit):
        if is_prime(i):
            print(i, end = " ")
    print()          

primes_less_than(5)      # 2 3
primes_less_than(15)     # 2 3 5 7 11 13
primes_less_than(100)    # 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97

################################################################################
# 3.2.5. k-té prvočíslo
################################################################################
# Funkce is_prime ze cvičení 3.2.3
def is_prime(n):
    for i in range (2, n//2 + 1):
        if (n % i == 0):
            return False
    return True

def kth_prime(k):
    citac, poradi = 1, 0 
    while poradi < k:
        citac += 1
        if is_prime(citac):
            poradi += 1
    return citac
        
print(kth_prime(1))      # 2
print(kth_prime(2))      # 3
print(kth_prime(10))     # 29
print(kth_prime(100))    # 541

################################################################################
# 3.2.6. Prvních k prvočísel
################################################################################
# Funkce is_prime ze cvičení 3.2.3
def is_prime(n):
    for i in range (2, n//2 + 1):
        if (n % i == 0):
            return False
    return True

def primes(count):
    citac, poradi = 1, 0 
    while poradi < count:
        citac += 1
        if is_prime(citac):
            print(citac, end = " ")
            poradi += 1
    print()

primes(2)      # 2 3
primes(5)      # 2 3 5 7 11
primes(10)     # 2 3 5 7 11 13 17 19 23 29

################################################################################
# 3.2.7. Prvních k prvočíselných dvojčat
################################################################################
# Funkce is_prime ze cvičení 3.2.3
def is_prime(n):
    for i in range (2, n//2 + 1):
        if (n % i == 0):
            return False
    return True

def twin_primes(count):
    citac, poradi = 1, 0 
    while poradi < count:
        citac += 1
        if is_prime(citac) & is_prime(citac+2):
            poradi += 1
            print(citac, citac+2, sep="-", end = ", ")
    print()
                
twin_primes(2)      # 3-5, 5-7,
twin_primes(5)      # 3-5, 5-7, 11-13, 17-19, 29-31,
twin_primes(10)     # 3-5, 5-7, 11-13, 17-19, 29-31, 41-43, 59-61, 71-73, 101-103, 107-109,

################################################################################
# 3.2.8. Rozklad na prvočísla
################################################################################
def is_prime(n):
    for i in range (2, n//2 + 1):
        if (n % i == 0):
            return False
    return True

def factorization(n):
    i = 2
    while (n > 1):
        if (is_prime(i)):
            if ( n % i == 0):
                n = n // i             # celočíselné dělení
                print(i, end = " ")
            else:
                i += 1
        else:
            i += 1
    print()

factorization(2)        # 2
factorization(7)        # 7
factorization(25)       # 5 5
factorization(42)       # 2 3 7
factorization(360)      # 2 2 2 3 3 5
factorization(1024)     # 2 2 2 2 2 2 2 2 2 2

################################################################################
# 3.2.9 Rozklad na prvočísla - není doladěno
################################################################################
def is_prime(n):
    for i in range (2, int(n/2+1)):
        if (n % i == 0):
            return False
    return True

def power_factorization(n):
    i = 2
    j = 0
    while (n > 1):
        if (is_prime(i)):
            if ( n % i == 0):
                n = n // i
                j += 1 
                print(i, end = " ")
            else:
                i += 1
        else:
            print(i, j, sep = "^", end = " ")
            i += 1
            j = 0
    print()

power_factorization(2)      # 2^1
power_factorization(7)      # 7^1
power_factorization(25)     # 5^2
power_factorization(42)     # 2^1 3^1 7^1
power_factorization(360)    # 2^3 3^2 5^1
power_factorization(1024)   # 2^10
