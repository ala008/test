####################
# 7.1.1. Trojúhelník
####################
def triangle(n):
    seznam_1 = []
    seznam_2 = []
    for i in range(n):
        seznam_1.append(1)
        seznam_2.append(seznam_1)
    return seznam_2 
print(triangle(0))     # []
print(triangle(1))     # [[1]]
print(triangle(3))     # [[1], [1, 1], [1, 1, 1]]
print(triangle(5))     # [[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1]]

################################################
# 7.1.2. Pascalův trojúhelník - kombinační čísla
################################################
def factorial(n):
    if n == 0:
        return 1
    elif n < 3:
        return n
    else:
        res = 2
        for i in range(3, n+1):
            res *= i
    return res    

def binomial_coefficient(n, k):
    if n >= k and k >= 0:
        return factorial(n) // (factorial(k) * factorial(n-k))
    else:
        return 0

def pascal_binomial(n):
    seznam1 = []
    for i in range(n):
        seznam = []
        for k in range(i+1): 
            seznam.append(binomial_coefficient(i,k))
        seznam1.append(seznam)
    return seznam1

print(pascal_binomial(0))     # []
print(pascal_binomial(1))     # [[1]]
print(pascal_binomial(3))     # [[1], [1, 1], [1, 2, 1]]
print(pascal_binomial(5))     # [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]

###################################################
# 7.1.3. Pascalův trojúhelník - z předchozího řádku
###################################################
def pascal(n):
    seznam1 = []
    for i in range(n):
        seznam = [1]
        for k in range(1, i):
            seznam.append(seznam1[i-1][k-1] + seznam1[i-1][k])
        if i > 0:
            seznam.append(1)
        seznam1.append(seznam)
    return seznam1

print(pascal(0))     # []
print(pascal(1))     # [[1]]
print(pascal(3))     # [[1], [1, 1], [1, 2, 1]]
print(pascal(5))     # [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]

def print_pascal(pascal):
    max_number_size = len(str(pascal[-1][len(pascal) // 2])) + 2
    for row in pascal:
        line = ""
        for x in row:
            line += ("{0: ^" + str(max_number_size) + "}").format(x)
        print(("{0: ^" + str(max_number_size * len(pascal[-1])) + "}").format(line))

print_pascal(pascal(6))

####################
# 7.2.1. Bubble sort
####################
def bubble_sort(l):
    n = len(l)
    for i in range(n):
        swapped = False
        for j in range(n-1, i, -1):
            if l[j] < l[j-1]:
                l[j], l[j-1] = l[j-1], l[j]
                swapped = True
        if swapped == False:
            break

l = [7, 6, 100, 3, 2, 11, -1, 10, 10, 42, 42, 42, 2, 13, 0, -5]
bubble_sort(l)
print(l)     # [-5, -1, 0, 2, 2, 3, 6, 7, 10, 10, 11, 13, 42, 42, 42, 100]

####################
# 7.2.2. Select sort
####################
def select_sort(l):
    n = len(l)
    for i in range(n):
        k = i
        for j in range(i+1, n):
            if l[j] < l[k]:
                k = j
        l[i], l[k] = l[k], l[i]


l = [7, 6, 100, 3, 2, 11, -1, 10, 10, 42, 42, 42, 2, 13, 0, -5]
select_sort(l)
print(l)     # [-5, -1, 0, 2, 2, 3, 6, 7, 10, 10, 11, 13, 42, 42, 42, 100]

####################
# 7.2.3. Insert sort
####################
