#########################
# 10.1.1. Barevné kruhy #
#########################
class Circle(object):

    def __init__(self, x, y, radius, color):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color

circle = Circle(4, 5, 10, 'red')
print(circle.y)       # 5
print(circle.color)   # red

####################
# 10.1.2. Obdélník #
####################
class Rectangle(object):

    def __init__(self, width, height):
        self.width = width
        self.height = height

def area(rectangle):
    return rectangle.width*rectangle.height

rectangle = Rectangle(4, 3)
print(rectangle.width)   # 4
print(rectangle.height)  # 3
print(area(rectangle))   # 12

###############
# 10.1.3. Bod #
###############
import math

class Point(object):
    
    def __init__(self, x, y):    
        self.x = x
        self.y = y

def distance(point1, point2):
    return math.sqrt((point1.x-point2.x)**2 + (point1.y-point2.y)**2)

point = Point(4, 5)
print(point.x)       # 4
print(point.y)       # 5
point.x = 10
print(point.x)       # 10
print(distance (Point(1, 2), Point(3, 5)))   # 3.60555127546

#################
# 10.1.4. Kniha #
#################
class Book(object):

    def __init__(self, nazev, autor, isbn, cena):
        self.nazev = nazev
        self.autor = autor
        self.isbn = isbn
        self.cena = cena

def print_info(book):
    sirka = 10
    frm = "{:" + str(sirka) + "}"
    print(frm.format("name:"), book.nazev)
    print(frm.format("author:"), book.autor)
    print(frm.format("isbn:"), book.isbn)
    print(frm.format("price:"), "${:d}".format(book.cena))
    print()

def draw_cover(book):
    sirka = max(len(book.nazev),len(book.autor)) + 8
    frm   = "{:^" + str(sirka) + "}"
    print("+" + "-"*sirka + "+")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + frm.format(book.nazev) + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + frm.format(book.autor) + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")
    print("|" + " "*sirka + "|")    
    print("+" + "-"*sirka + "+")
    print()

cookbook = Book('Cooking for Geeks', 'Jeff Potter', '0596805888', 22)
print_info(cookbook)
draw_cover(cookbook)

################
# 10.2.1. Kruh #
################
import math

class Circle(object):

    def __init__(self, center, radius):
        # inicializace objektu
        self.center = center
        self.radius = radius

    def get_perimeter(self):
        # Vraci obvod kruhu
        return 2 * math.pi * self.radius

    def get_area(self):
        # Vraci obsah kruhu
        return math.pi * self.radius**2

    def __str__(self):
        # Vraci informacni retezec
        return "Circle at " + str(self.center) + " with radius " + \
               str(self.radius)

circle = Circle((-130, -130), 100)
print(circle)  # Circle at (-130, -130) with radius 100
print(circle.get_area())  # 31415.926535897932

#################
# 10.2.2. Želvy #
#################
import math
from random import randint

class Turtle(object):
    def __init__(self):
        # nahodna pocatecni pozice
        self.x = randint(0,500)
        self.y = randint(0,500)
        self.direction = 0
        self.lines = []
        self.color = "black"

    def left(self, angle):
        self.direction -= angle

    def right(self, angle):
        self.direction += angle

    def forward(self, distance):
        nx = self.x + distance * math.cos(self.direction * math.pi / 180)
        ny = self.y + distance * math.sin(self.direction * math.pi / 180)

        self.lines.append((self.x, self.y, nx, ny, self.color))
        self.x, self.y = nx, ny

    def polygon(self, length, number):
        # vykresleni mnohouhelnika
        # nahodna pocatecni pozice
        self.x = randint(0,500)
        self.y = randint(0,500)        

        angle = 360.0 / float(number)
        self.forward(length)
        for i in range(number):
            self.right(angle)
            self.forward(length)

    def set_color(self, color):
        self.color = color

    def random_step(self, distance):
        # nahodny smer 
        direction = randint(0, 360) 
        self.x = self.x + distance * math.cos(direction * math.pi / 180)
        self.y = self.y + distance * math.sin(direction * math.pi / 180)        

    def turn_towards(self, other_turtle):
        self.direction = math.atan2(other_turtle.y - self.y,
                         other_turtle.x - self.x) / math.pi * 180

    def get_lines_svg(self):
        svg = ""
        for x1, y1, x2, y2, color in self.lines:
            svg += """\t<line x1='{}' y1='{}' x2='{}' y2='{}'
                style='stroke: {}; stroke-width:2' />\n""".format(x1, y1, x2, y2, color)
        return svg

    def save(self, filename):
        with open(filename, "w") as f:
            f.write('<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink">\n')
            f.write(self.get_lines_svg())
            f.write("\n</svg>")

def chase(steps = 10):
    zelva1 = Turtle()
    zelva1.set_color("blue")
    zelva2 = Turtle()
    zelva2.set_color("red")

    for i in range(steps):
        zelva1.turn_towards(zelva2)
        zelva1.forward(50)
        zelva2.left(randint(0,360))
        zelva2.forward(50)

    with open("zelva1.svg", "w") as f:
        f.write('<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink">\n')
        f.write(zelva1.get_lines_svg())
        f.write(zelva2.get_lines_svg())
        f.write("\n</svg>")

chase(20)



