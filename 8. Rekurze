#####################
# 8.1.1. Součet čísel
#####################
def series_sum(n):
    if n == 0:
        return 0
    else:
        soucet = n + series_sum(n-1)
        return soucet

print(series_sum(1))     # 1
print(series_sum(5))     # 15
print(series_sum(10))    # 55
print(series_sum(100))   # 5050

###########################
# 8.1.2. Prvek posloupnosti
###########################
def sequence(n):
    if n==0:
        res = 5
    else:
        res = 2*sequence(n-1) - 1

    return res

print(sequence(0))     # 5
print(sequence(1))     # 9
print(sequence(2))     # 17
print(sequence(3))     # 33

#############################
# 8.1.3. Zašroubování žárovky
#############################
def screwing(n):
    if n>0:
        print("twist")
        screwing(n-1)

screwing(3)
# Ocekavany vystup:
# twist
# twist
# twist

#############################
# 8.1.4. Součet seznamu čísel
#############################
def list_sum(numbers):
    sum = 0
    if len(numbers)>0:
        sum = sum + numbers[0] + list_sum(numbers[1:])
    return sum

print(list_sum([1, 8, 2, 0, 4, 2]))  # 17

############################
# 8.1.5. Binární vyhledávání
############################
def binary_search(value, numbers):
    return binarySearch(numbers, value, 0, len(numbers)-1)

def binarySearch(seznam, hodnota, vlevo, vpravo):
    if vpravo < vlevo:
        return False
    stred = (vpravo + vlevo) // 2
    if seznam[stred] == hodnota:
        return True
    if hodnota < seznam[stred]:
        return binarySearch(seznam, hodnota, vlevo, stred - 1)
    else:
        return binarySearch(seznam, hodnota, stred + 1, vpravo)
    
print(binary_search(5, [1, 2, 5, 8]))  # True
print(binary_search(4, [1, 2, 5, 8]))  # False

######################
# 8.2.1. Hanojské věže
######################
def hanoi(n, source, target, auxiliary):
    if n >= 1:
        hanoi(n-1, source, auxiliary, target) 
        print(source," -> ", target) 
        hanoi(n-1, auxiliary, target, source)

hanoi(3, 'A', 'C', 'B')

##########################
# 8.2.3. Maximum a minimum
##########################
def min_max(numbers):
    return maximum(numbers, 0, len(numbers)-1)

def maximum(numbers, leftIndex, rightIndex):
    if (leftIndex == rightIndex):
        return numbers[leftIndex]
    middle = (leftIndex + rightIndex) // 2
    left = maximum(numbers, leftIndex, middle)
    right = maximum(numbers, middle + 1, rightIndex)
    if (left > right):
        return left
    else:
        return right

print(min_max([8, 4, 3, 5, 9, 2, 1, 7, 6]))  # (1, 9)

######################
# 8.2.4. Rychlé řazení
######################
# vraci serazene pole 'array'
def quicksort(array):
    quick_sort(array, 0, len(array))
    return array

def prerovnej(pole, levy_index, pravy_index):
    pivot = pole[pravy_index - 1]
    # i je nejlevější nepřerovnaný prvek
    i = levy_index
    # j je aktuální probíraný prvek
    for j in range(levy_index, pravy_index - 1):
        if (pole[j] <= pivot):
            # Prohodíme tyto dva prvky
            (pole[i], pole[j]) = (pole[j], pole[i])
            i += 1
    # Dáme pivota na správné místo
    (pole[pravy_index-1], pole[i]) = (pole[i], pole[pravy_index-1])
    return i

def quick_sort(pole, levy_index, pravy_index):
    if (levy_index >= pravy_index):
        return
    # Přerovnáme úsek...
    pivot = prerovnej(pole, levy_index, pravy_index)
    # ... a zavoláme se rekurzivně na oba podúseky
    quick_sort(pole, levy_index, pivot)
    quick_sort(pole, pivot + 1, pravy_index)

print(quicksort([2, 7, 8, 1, 4, 5, 9, 3, 6]))
# vystup: [1, 2, 3, 4, 5, 6, 7, 8, 9]

########################
# 8.3.1. Vnořené čtverce
########################
from turtle import Turtle
from math import sqrt
julie = Turtle()
julie.speed(10)
julie.up()
julie.setposition(-90, -90)
julie.down()

# depth: kolik ctvercu vykreslit
# length: delka strany nejvetsiho ctverce
def nested_squares(depth, length=180.0):
    if depth > 0:
        for i in range(4):
            julie.forward(length)
            julie.left(90)
        julie.up()
        julie.forward(length/2)
        julie.down()
        julie.left(45)
        nested_squares(depth-1, length/sqrt(2))

nested_squares(8)

##############
# 8.3.2. Strom
##############
from turtle import Turtle
julie = Turtle()
julie.speed(10)
julie.left(90)

# length: delka kmenove cary
def tree(length):
    # ukoncovaci podminka
    if length > 10:
        julie.forward(length)
        # leva vetev
        julie.left(45)
        nova_vetev = length*0.6
        tree(nova_vetev)
        # prava vetev
        julie.right(90)
        tree(nova_vetev)
        # .. a vratime se na zacatek
        julie.left(45)
        julie.backward(length)

tree(90)

#######################
# 8.3.3. Kochova vločka
#######################
from turtle import Turtle
julie = Turtle()
julie.speed(10)
julie.up()
julie.setposition(-190, 0)
julie.down()

# depth: pocet rekurzivnich zanoreni
# size: sirka krivky
def koch(depth=5, size=380.0):
    if depth > 1:
        koch(depth-1, size/3)
        julie.left(60)
        koch(depth-1, size/3)
        julie.right(120)
        koch(depth-1, size/3)
        julie.left(60)
        koch(depth-1, size/3)
    else:
        julie.forward(size)

koch(5)
